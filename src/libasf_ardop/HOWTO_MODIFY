Modification Instructions for ARDOP:

	Our SAR processor is designed to be relatively easy
to modify-- still, due to the complex technical nature of
SAR processing, changing ARDOP is quite challenging.

	This document describes the general procedure for modifying
ARDOP to read a new data format.  Of course, many details of the specific
format you wish to read must be found elsewhere.



I/O Routines:
	The first step in reading another data format is to
read the actual I and Q values.  These values are the raw,
uncompressed outputs of the analog-to-digital converter
on the SAR satellite for the in-phase and quadrature components.

	If the data is similar to ASF CCSD, you may be
able to use an ARDOP input file (.in) to tell ARDOP the
number of bytes per line.  If so, you may not even have to
modify any code.

	Otherwise, once you know the format of the data you're trying
to read, you'll want to modify fillOutGetRec and getSignalLine, 
in the file "read_signal.c".  These procedures are:


getRec * fillOutGetRec(char file[]);
	Takes a file name as input, and returns a 'getRec *', which
is only used within the "read_signal.c" file-- so you can
store anything you want in there.
	Currently, this record stores a file pointer, number of lines,
number of samples, and a few auxiliary fields.  You can store
anything you wish here, although it will be easiest and most portable
if you use our fields.


void getSignalLine(getRec *r,int lineNo,complexFloat *destArr,
                   int readStart,int readLen)
	Takes a getRec, line number, complex destination, sample start
number, and number of samples to read.
	This procedure reads a single line of input and copies it
to destArr.  This is another procedure you can make do anything you want;
but the complex values in destArr must be centered around zero.


You can test out the I/O routines by building signal2amp-- use "make signal2amp".


Pulse Replica (AKA "chirp"):
	You'll need to construct or read in the range pulse replica--
this is sometimes included in data files, sometimes in the metadata,
and sometimes not included at all.  Since the range pulse is a linear FM
chirp, often all you need is the chirp slope to construct a reasonably
accurate chirp.
	The chirp is read in under "aisp.c"'s calc_range_ref function.


Metatdata Routines:
	In addition to reading the raw I and Q values, you must also supply
the processor with metadata information.  You can either modify ardop_setup.c's 
get_params to automatically read in these values, or just create a 
".in" file containing the relevant parameters.  

       Crucial parameters:
       
nla-- the number of samples to output in range direction (#)
earthRadius-- local earth Radius (m)
ht-- spacecraft altitude (from earth center) (m)
slantToFirst-- slant range to first range pixel (m)
prf-- radar pulse rate (Hz)
fs-- range sampling rate (samples/sec)
chirpSamples-- length of range reference function
wavl-- radar wavelength (m)
vel-- orbital velocity(m/s)


As always, if you have questions, you can contact the authors of the software:
Rick Guritz, rguritz@asf.alaska.edu
Tom Logan, tlogan@asf.alaska.edu

