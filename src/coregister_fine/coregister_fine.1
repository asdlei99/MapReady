.TH coregister_fine 1 "February 2004"

.SH NAME:
coregister_fine \- performs sub-pixel correlation

.SH SYNOPSIS:
.B coregister_fine
.BI "[-g <grid_res>] [-f] [-log <file>] [-quiet]"
.in +15
.B " <file1> <file2> <control> <out>"

.SH DESCRIPTION:
Coregister_fine is a program used to perform sub-pixel correlation during the 
process of interferometry. It only works with complex images.
.PP
The way coregister_fine works is it correlates (that is, match up) two images at 
various points in the image. The points it matches up are arranged in a grid. 
The number of points in this grid can be set by the command line.
.PP
Coregister_fine needs an gross estimate (to a single pixel) of the offset 
between the two images; it gets this offset from its control file. For each grid 
point, Coregister_fine computes the phase coherence of several offsets near the 
gross offset, and searches for the highest coherence offset.  It then refines 
this offset by performing a parabolic interpolation on the nearby coherence 
values.
.PP
Coregister_fine now double-checks its result by running the same calculation 
with the images reversed. If the two results agree, the point is "good" and is 
output. If the results disagree, the correlation is "bad" and is not output.
.PP
In addition to the offset, coregister_fine also calculates the SNR
(Signal-to-Noise Ratio) at each point. This can be used as a measure of the 
quality of the correlation. Correlation points with a low SNR are bad.
.PP
If coregister_fine does not find many good points, you may not get an 
interferogram when you interfere the two images. This can be the result of 
several things: your interferometric baseline might be too big, and there will 
never be an interferogram between the images; the initial offset in the 
coregister_fine control file is incorrect, and coregister_fine cannot find 
anything that looks like interferometric phase.
.PP
Increasing the number of grid points slows the program down, but generates more 
output for fit_line or fit_plane, which then improves the coherence.

.SH ARGUMENTS:
.TP 8
.B "file 1"
The first image file (which will not be moved.)
.TP 8
.B "file 2"
The second image file (which will be moved.)
.TP 8
.B "control"
File generated by coregister_coarse(1), formatted as such:
.br
   <offset x (integer)>
.br
   <offset y (integer)>
.br
   <correlation chip size (32)>
.br
   <fraction of a pixel (1)>
.br
   <maximum possible offset in X (4.1)>
.br
   <maximum possible offset in Y (6.1)>
.TP 8
.B "out"
A list of points, and the offset (relative to coregister_coarse's initial 
offset) at each point. The format is:
.br
   <img1 X> <img1 Y> <img2 X> <img2 Y> <snr>

.SH OPTIONS:
.TP 8
.B "-g \fRgrid_res\fP"
Coregister_fine will correlate that number of grid points per axis. The total 
number of points in the grid is this parameter squared, so using large values 
will take a long time to complete. (e.g. if a 20x20 grid (the default) takes 2 
min, a 40x40 grid would take approx. 8 minutes.)
.TP 8
.B "-f"
Coregister_fine will use a complex FFT to attempt to match the two images. This 
seems to work better in cases where the coherence is very low. If the standard 
coherence matching algorithm fails, try using the complex FFT matching.
.TP 8
.B "-log \fRfile\fP"
Option to have the output written to a log file.
.TP 8
.B "-quiet"
Option to have the output surpressed to the essential.

.SH EXAMPLES:
If you had just run coregister_coarse to generate a control point file "ctrl1", 
and you had two float complex (.cpx and .meta) image files named "img1" and 
"img2", and you wanted to perform correlation (at the default 10x10 grid 
resolution, running 100 points) to generate an offset point file 
"coregister_fine1", you would type:
.ce 1
example% coregister_fine img1 img2 ctrl1 coregister_fine1
.PP

.SH SEE ALSO:
coregister_coarse(1), fit_line(1), fit_plane(1)

.SH HARDWARE/SOFTWARE LIMITATIONS:
None known.

.SH BUGS:
None known.

.SH CONTACT:
uso@asf.alaska.edu
.RE
http://www.asf.alaska.edu



